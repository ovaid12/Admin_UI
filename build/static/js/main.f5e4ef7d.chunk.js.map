{"version":3,"sources":["components/paginate.js","components/searchBar.js","components/fetch.js","App.js","index.js"],"names":["Paginate","total","itemPerPage","currentPage","onPageChange","useState","totalPages","SetTotalPages","useEffect","Math","ceil","paginationItem","useMemo","pages","i","push","Pagination","Item","active","onClick","Prev","disabled","Next","SearchBar","onSearch","search","setSearch","className","type","placeholder","value","onChange","event","target","Fetch","data","setData","setTotalPages","currPage","setCurrPage","fetch","then","res","json","map","d","select","id","name","email","role","newData","newName","filter","user","toLowerCase","includes","length","slice","editDataId","setEditDataId","editFormData","setEditFormData","handleEditFormData","preventDefault","fieldName","getAttribute","fieldValue","newFormData","handleCancelClick","onSubmit","editedData","newDatas","findIndex","item","e","checked","newSelected","index","required","formValues","handleEditClick","actualData","remove","itemsPerPage","page","deletedData","removeValue","updatedData","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.f5e4ef7d.chunk.js","sourcesContent":["import { React, useState, useEffect, useMemo } from \"react\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nexport default function Paginate({\r\n  total = 0,\r\n  itemPerPage = 10,\r\n  currentPage = 1,\r\n  onPageChange\r\n}) {\r\n  const [totalPages, SetTotalPages] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (total > 0 && itemPerPage > 0) {\r\n      SetTotalPages(Math.ceil(total / itemPerPage));\r\n    }\r\n  }, [total, itemPerPage]);\r\n\r\n  const paginationItem = useMemo(() => {\r\n    const pages = [];\r\n    for (let i = 1; i <= totalPages; i++) {\r\n      pages.push(\r\n        <Pagination.Item\r\n          key={i}\r\n          active={i === currentPage}\r\n          onClick={() => onPageChange(i)}\r\n        >\r\n          {i}\r\n        </Pagination.Item>\r\n      );\r\n    }\r\n    return pages;\r\n  }, [totalPages, currentPage]);\r\n\r\n  if (totalPages === 0) return null;\r\n\r\n  return (\r\n    <>\r\n    <Pagination>\r\n      <Pagination.Prev\r\n        onClick={() => onPageChange(currentPage - 1)}\r\n        disabled={currentPage === 1}\r\n      />\r\n      {paginationItem}\r\n      <Pagination.Next\r\n        onClick={() => onPageChange(currentPage + 1)}\r\n        disabled={currentPage === totalPages}\r\n      />\r\n    </Pagination>\r\n    </>\r\n  );\r\n}\r\n","import { React, useState } from \"react\";\r\nimport \"./search.css\";\r\n\r\nexport default function SearchBar({ onSearch }) {\r\n  const [search, setSearch] = useState('');\r\n  const searchItems = (value) => {\r\n    setSearch(value);\r\n    onSearch(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"search\"\r\n        type=\"text\"\r\n        placeholder=\"Search for name\"\r\n        value={search}\r\n        onChange={(event) => searchItems(event.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { React, useState, useEffect, useMemo } from \"react\";\r\nimport Paginate from \"./paginate\";\r\nimport SearchBar from \"./searchBar\";\r\nimport \"./style.css\";\r\n\r\nexport default function Fetch() {\r\n  const [data, setData] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [currPage, setCurrPage] = useState(1);\r\n  const ITEMS_PER_PAGE = 10;\r\n  useEffect(() => {\r\n    const getData = () => {\r\n      fetch(\r\n        \"https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json\"\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setData(data.map((d)=>{\r\n            return{\r\n            select:false,\r\n            id:d.id,\r\n            name:d.name,\r\n            email:d.email,\r\n            role:d.role\r\n          }\r\n          }));\r\n        });\r\n    };\r\n    getData();\r\n  }, []);\r\n\r\n\r\n//delete an user from table\r\n  const remove = (id) => {\r\n    var actualData = data.filter((data) => data.id !== id);\r\n    setData(actualData);\r\n  };\r\n\r\n  //search and show data according to page\r\n  const newData = useMemo(() => {\r\n    let newName = data;\r\n    if(search){\r\n      newName = newName.filter(user => user.name.toLowerCase().includes(search.toLowerCase()))\r\n    }\r\n    setTotalPages(newName.length);\r\n    return newName.slice(\r\n      (currPage - 1) * ITEMS_PER_PAGE,\r\n      (currPage - 1) * ITEMS_PER_PAGE + ITEMS_PER_PAGE\r\n    );\r\n  }, [data, currPage, search]);\r\n  //inline edit of row data\r\n  const [editDataId, setEditDataId] = useState('');\r\n  const [editFormData, setEditFormData] = useState({\r\n    name:\"\",\r\n    email:\"\",\r\n    role:\"\"\r\n  })\r\n  const handleEditClick = (event, data) => {\r\n     event.preventDefault();\r\n     setEditDataId(data.id);\r\n     const formValues = {\r\n       name:data.name,\r\n       email:data.email,\r\n       role:data.role\r\n     }\r\n     setEditFormData(formValues)\r\n     \r\n  }\r\n\r\n  const handleEditFormData = (event) => {\r\n     event.preventDefault();\r\n     const fieldName = event.target.getAttribute(\"name\");\r\n     const fieldValue = event.target.value;\r\n     const newFormData = {...editFormData}\r\n     newFormData[fieldName] = fieldValue;\r\n     setEditFormData(newFormData);\r\n\r\n  }\r\n\r\n  //to save the edited value\r\n  const handleEditFormDataSubmit = (event) => {\r\n    event.preventDefault();\r\n     const editedData = {\r\n       id: editDataId,\r\n       name:editFormData.name,\r\n       email:editFormData.email,\r\n       role:editFormData.role\r\n\r\n     }\r\n     const newDatas = [...data]\r\n     const index = data.findIndex((item)=> item.id === editDataId)\r\n       \r\n        newDatas[index] = editedData\r\n        setData(newDatas);\r\n        setEditDataId('');\r\n  }\r\n \r\n\r\n  //to cancel the changes made\r\n  const handleCancelClick = () => {\r\n    setEditDataId('');\r\n  }\r\n\r\n  //selectall delete data from row\r\n  const selectAll = (e) => {\r\n    let checked = e.target.checked;\r\n    let newSelected = [...data];\r\n    setData(\r\n      newSelected.map((d, index)=>{\r\n        if(index < currPage*ITEMS_PER_PAGE){\r\n          d.select = checked;\r\n          return d;\r\n      }else{\r\n        return d;\r\n      }\r\n      })\r\n    )\r\n  }\r\n\r\n  //delete selected values\r\n  const removeSelectedId = ()=>{\r\n    const deletedData = [...data];\r\n    var removeValue = [];\r\n    const myData = deletedData.map((item)=>{\r\n         if(item.select){\r\n          return removeValue.push(item);\r\n         }\r\n    })\r\n    var updatedData = deletedData.filter(value => !removeValue.includes(value));\r\n    setData(updatedData);  \r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>Admin UI</h2>\r\n      </div>\r\n      <SearchBar\r\n          onSearch={(value) => {\r\n          setSearch(value);\r\n          setCurrPage(1);\r\n        }}\r\n      />\r\n      <form onSubmit={ handleEditFormDataSubmit}>\r\n      <table id=\"customers\">  \r\n        <tr>\r\n          <th><input type=\"checkbox\" onChange={selectAll}/></th>  \r\n          <th>Name</th>\r\n          <th>Email</th>\r\n          <th>Role</th>\r\n          <th>Action</th> \r\n        </tr>\r\n\r\n        {newData &&\r\n          newData.map((item) => ( \r\n            <>\r\n            {editDataId === item.id ? (\r\n               <tr>\r\n                 <td>\r\n                   <input type=\"checkbox\"/>\r\n                 </td>\r\n               <td>\r\n                 <input\r\n                   type=\"text\"\r\n                   value={editFormData.name}\r\n                   name=\"name\"\r\n                   placeholder=\"enter your name\"\r\n                   required=\"required\"\r\n                   onChange={handleEditFormData} />\r\n                   \r\n               </td>\r\n               <td>\r\n                 <input\r\n                   type=\"email\"\r\n                   value={editFormData.email}\r\n                   name=\"email\"\r\n                   placeholder=\"enter your email\"\r\n                   required=\"required\"\r\n                   onChange={handleEditFormData} />\r\n               </td>\r\n               <td>\r\n                 <input\r\n                   type=\"text\"\r\n                   value={editFormData.role}\r\n                   name=\"role\"\r\n                   placeholder=\"enter your role\"\r\n                   required=\"required\"\r\n                   onChange={handleEditFormData} />\r\n               </td>\r\n               <td>\r\n               <td>\r\n                 <button type=\"submit\">Save</button>\r\n               </td>\r\n               <td>\r\n                 <button type=\"button\" onClick={handleCancelClick}>Cancel</button>\r\n               </td>\r\n             </td>\r\n             </tr>\r\n            ):\r\n\r\n            (<tr>\r\n              <td><input type=\"checkbox\" onChange={\r\n                (e) => {\r\n                  let checked = e.target.checked;\r\n                  setData(\r\n                    data.map(data=>{\r\n                      if(item.id === data.id){\r\n                        data.select = checked;\r\n                      }\r\n                      return data;\r\n                    })\r\n                  )\r\n              \r\n                }\r\n\r\n              } checked={item.select}/></td>\r\n              <td>{item.name}</td>\r\n              <td>{item.email}</td>\r\n              <td>{item.role}</td>\r\n              <td>\r\n                <td>\r\n                  <button onClick={(event)=>handleEditClick(event, item)}>Edit</button>\r\n                </td>\r\n                <td>\r\n                  <button onClick={() => remove(item.id)}>Delete</button>\r\n                </td>\r\n              </td>\r\n             \r\n            </tr>\r\n        )}\r\n         </>\r\n              \r\n          ))}    \r\n          \r\n      </table>\r\n      </form>\r\n      <div className=\"at-center\">\r\n        {newData.length > 0 ? <Paginate\r\n          total={totalPages}\r\n          itemsPerPage={ITEMS_PER_PAGE}\r\n          currentPage={currPage}\r\n          onPageChange={(page) => setCurrPage(page)}\r\n        />: <tr><td>No Record Found</td></tr>\r\n        }\r\n      </div>\r\n      <div>\r\n\r\n           {newData.length > 1 ? <button onClick={removeSelectedId}>Delete All</button> : ''}\r\n\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.css\";\nimport Fetch from \"./components/fetch\";\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Fetch />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}